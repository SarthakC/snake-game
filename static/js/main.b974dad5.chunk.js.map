{"version":3,"sources":["components/SnakeBody.jsx","components/Target.jsx","functions/randomIntFromInterval.jsx","functions/getRandomCoordinates.jsx","components/Header.jsx","components/App.jsx","index.js"],"names":["props","className","SnakeBodyCoordinates","map","dot","i","dotPosition","top","left","key","style","coordinates","randomIntFromInterval","min","max","Math","floor","random","getRandomCoordinates","Header","class","title","score","prevHighScore","initialState","direction","speed","targetCoordinates","snakeBodyCoordinates","show","display","hidden","pulse","App","state","keyPress","e","window","event","keyCode","setState","moveSnake","snakePulse","snakeDots","snakeHead","length","push","shift","document","onkeydown","this","setInterval","checkBorderCollision","checkSelfCollision","checkHitTarget","endGame","snakeBody","pop","forEach","target","randomCoordinates","snakeLengthIncrease","updatedSnakeBody","unshift","highScore","currentScore","newState","SnakeBody","Target","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b974dad5.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default props => {\n  return (\n    <div className=\"snake-body\">\n      {props.SnakeBodyCoordinates.map((dot, i) => {\n        const dotPosition = {\n          top: `${dot[1]}%`,\n          left: `${dot[0]}%`\n        };\n        return <div className=\"dot\" key={i} style={dotPosition} />;\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n  const style = {\n    left: `${props.coordinates[0]}%`,\n    top: `${props.coordinates[1]}%`\n  };\n\n  return <div className=\"dot red-bg\" style={style} />;\n};\n","const randomIntFromInterval = function(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport default randomIntFromInterval;\n","import randomIntFromInterval from \"./randomIntFromInterval\";\n\nconst getRandomCoordinates = (max, min) => {\n  const x = randomIntFromInterval(max / 2, min / 2) * 2;\n  const y = randomIntFromInterval(max / 2, min / 2) * 2;\n  return [x, y];\n};\n\nexport default getRandomCoordinates;\n","import React from \"react\";\n\nconst Header = props => {\n  return (\n    <div class=\"ui menu\">\n      <div class=\"header item\">{props.title}</div>\n      <div class=\"item\">{props.score}</div>\n      <div class=\"item\">{props.prevHighScore}</div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"../css/styles.css\";\nimport SnakeBody from \"./SnakeBody\";\nimport Target from \"./Target\";\nimport getRandomCoordinates from \"../functions/getRandomCoordinates\";\nimport Header from \"./Header\";\n// import keyPress from \"../functions/keyPress\";\n\nconst initialState = {\n  direction: null,\n  speed: 200,\n  targetCoordinates: getRandomCoordinates(0, 98),\n  snakeBodyCoordinates: [[0, 0], [2, 0], [4, 0]],\n  show: { display: \"block\" },\n  hidden: { display: \"none\" },\n  pulse: 2\n};\nexport default class App extends Component {\n  state = { ...initialState, ...{ prevHighScore: 0 } };\n\n  componentDidMount() {\n    document.onkeydown = this.keyPress;\n    setInterval(this.moveSnake, this.state.speed);\n  }\n\n  componentDidUpdate() {\n    this.checkBorderCollision();\n    this.checkSelfCollision();\n    this.checkHitTarget();\n  }\n  keyPress = e => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({ direction: \"UP\" });\n        break;\n      case 40:\n        this.setState({ direction: \"DOWN\" });\n        break;\n      case 37:\n        this.setState({ direction: \"LEFT\" });\n        break;\n      case 39:\n        this.setState({ direction: \"RIGHT\" });\n        break;\n      default:\n        break;\n    }\n  };\n\n  moveSnake = () => {\n    let snakePulse = this.state.pulse;\n    let snakeDots = [...this.state.snakeBodyCoordinates];\n    let snakeHead = snakeDots[snakeDots.length - 1];\n    switch (this.state.direction) {\n      case \"RIGHT\":\n        snakeHead = [snakeHead[0] + snakePulse, snakeHead[1]];\n        break;\n      case \"LEFT\":\n        snakeHead = [snakeHead[0] - snakePulse, snakeHead[1]];\n        break;\n      case \"UP\":\n        snakeHead = [snakeHead[0], snakeHead[1] - snakePulse];\n        break;\n      case \"DOWN\":\n        snakeHead = [snakeHead[0], snakeHead[1] + snakePulse];\n        break;\n      default:\n        break;\n    }\n    snakeDots.push(snakeHead);\n    snakeDots.shift();\n    this.setState({\n      snakeBodyCoordinates: snakeDots\n    });\n  };\n\n  checkBorderCollision() {\n    let snakeHead = this.state.snakeBodyCoordinates[\n      this.state.snakeBodyCoordinates.length - 1\n    ];\n    if (\n      snakeHead[0] >= 100 ||\n      snakeHead[1] >= 100 ||\n      snakeHead[0] < 0 ||\n      snakeHead[1] < 0\n    ) {\n      this.endGame();\n    }\n  }\n\n  checkSelfCollision() {\n    let snakeBody = [...this.state.snakeBodyCoordinates];\n    let snakeHead = snakeBody[snakeBody.length - 1];\n    snakeBody.pop();\n    snakeBody.forEach(dot => {\n      if (snakeHead[0] === dot[0] && snakeHead[1] == dot[1]) {\n        this.endGame();\n      }\n    });\n  }\n\n  checkHitTarget() {\n    let snakeHead = this.state.snakeBodyCoordinates[\n      this.state.snakeBodyCoordinates.length - 1\n    ];\n    let target = this.state.targetCoordinates;\n    if (snakeHead[0] === target[0] && snakeHead[1] === target[1]) {\n      let randomCoordinates = getRandomCoordinates(0, 98);\n      this.setState({ targetCoordinates: randomCoordinates });\n      this.snakeLengthIncrease();\n    }\n  }\n\n  snakeLengthIncrease() {\n    let updatedSnakeBody = [...this.state.snakeBodyCoordinates];\n    updatedSnakeBody.unshift([]);\n    this.setState({ snakeBodyCoordinates: updatedSnakeBody });\n  }\n\n  endGame() {\n    let highScore = this.state.prevHighScore;\n    let currentScore = this.state.snakeBodyCoordinates.length - 3;\n    if (currentScore > highScore) {\n      highScore = currentScore;\n    } else {\n      highScore = this.state.prevHighScore;\n    }\n    let newState = { ...initialState, ...{ prevHighScore: highScore } };\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <div className=\"centered ui\">\n        <Header\n          title={\"Snake Game Using React\"}\n          score={`Your Score is: ${this.state.snakeBodyCoordinates.length - 3}`}\n          prevHighScore={`Current High Score is: ${this.state.prevHighScore}`}\n        />\n        <div className=\"ui equal width grid\">\n          <div className=\"centered row\">\n            <div className=\"arena\" style={this.state.show}>\n              <SnakeBody\n                SnakeBodyCoordinates={this.state.snakeBodyCoordinates}\n              />\n              <Target coordinates={this.state.targetCoordinates} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}