{"version":3,"sources":["components/SnakeBody.jsx","components/Target.jsx","functions/randomIntFromInterval.jsx","functions/getRandomCoordinates.jsx","components/GoogleAuth.jsx","actions/index.jsx","actions/types.jsx","components/Header.jsx","components/App.jsx","index.js"],"names":["props","className","SnakeBodyCoordinates","map","dot","i","dotPosition","top","left","key","style","coordinates","randomIntFromInterval","min","max","Math","floor","random","getRandomCoordinates","GoogleAuth","onAuthChange","isSignedIn","signIn","auth","currentUser","get","getId","signOut","onSignInClick","onSignOutClick","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","this","onClick","renderAuthButton","React","Component","connect","state","userId","type","payload","Header","title","score","prevHighScore","initialState","direction","speed","targetCoordinates","snakeBodyCoordinates","show","display","hidden","pulse","App","keyPress","e","event","keyCode","setState","document","onkeydown","setInterval","moveSnake","checkBorderCollision","checkSelfCollision","checkHitTarget","snakeHead","length","endGame","snakeBody","pop","forEach","target","randomCoordinates","snakeLengthIncrease","updatedSnakeBody","unshift","highScore","currentScore","newState","SnakeBody","Target","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.58af214c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default props => {\n  return (\n    <div className=\"snake-body\">\n      {props.SnakeBodyCoordinates.map((dot, i) => {\n        const dotPosition = {\n          top: `${dot[1]}%`,\n          left: `${dot[0]}%`\n        };\n        return <div className=\"dot\" key={i} style={dotPosition} />;\n      })}\n    </div>\n  );\n};\n\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n\n// class SnakeBody extends Component {\n//   renderSnake() {\n//     this.props.SnakeBodyCoordinates.map((dot, i) => {\n//       const dotPosition = {\n//         top: `${dot[1]}%`,\n//         left: `${dot[0]}%`\n//       };\n//       return <div className=\"dot\" key={i} style={dotPosition} />;\n//     });\n//   }\n//   render() {\n//     return <div>{this.renderSnake}</div>;\n//   }\n// }\n// const mapStateToProps = state => {\n//   console.log(state);\n//   return state;\n// };\n// export default connect(mapStateToProps)(SnakeBody);\n","import React from \"react\";\n\nexport default props => {\n  const style = {\n    left: `${props.coordinates[0]}%`,\n    top: `${props.coordinates[1]}%`\n  };\n\n  return <div className=\"dot red-bg\" style={style} />;\n};\n","const randomIntFromInterval = function(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport default randomIntFromInterval;\n","import randomIntFromInterval from \"./randomIntFromInterval\";\n\nconst getRandomCoordinates = (max, min) => {\n  const x = randomIntFromInterval(max / 2, min / 2) * 2;\n  const y = randomIntFromInterval(max / 2, min / 2) * 2;\n  return [x, y];\n};\n\nexport default getRandomCoordinates;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { signIn, signOut } from \"../actions\";\n\nclass GoogleAuth extends React.Component {\n  componentDidMount() {\n    window.gapi.load(\"client:auth2\", () => {\n      window.gapi.client\n        .init({\n          clientId:\n            \"276937759348-m72vbhcpceoav4qaumn4tlstgtnbchua.apps.googleusercontent.com\",\n          scope: \"email profile\"\n        })\n        .then(() => {\n          this.auth = window.gapi.auth2.getAuthInstance();\n          this.onAuthChange(this.auth.isSignedIn.get());\n          this.auth.isSignedIn.listen(this.onAuthChange);\n        });\n    });\n  }\n  onAuthChange = isSignedIn => {\n    if (isSignedIn) {\n      this.props.signIn(this.auth.currentUser.get().getId());\n    } else {\n      this.props.signOut();\n    }\n  };\n\n  onSignInClick = () => {\n    this.auth.signIn();\n  };\n  onSignOutClick = () => {\n    this.auth.signOut();\n  };\n\n  renderAuthButton() {\n    if (this.props.isSignedIn == null) {\n      return null;\n    } else if (this.props.isSignedIn) {\n      return (\n        <button onClick={this.onSignOutClick} className=\"ui red google button\">\n          <i className=\"google icon\" />\n          Sign Out\n        </button>\n      );\n    } else {\n      return (\n        <button onClick={this.onSignInClick} className=\"ui red google button\">\n          <i className=\"google icon\" />\n          Sign In with Google\n        </button>\n      );\n    }\n  }\n  render() {\n    return <div>{this.renderAuthButton()}</div>;\n  }\n}\nconst mapStateToProps = state => {\n  return { isSignedIn: state.auth.isSignedIn };\n};\nexport default connect(\n  mapStateToProps,\n  { signIn, signOut }\n)(GoogleAuth);\n","import { SIGN_IN, SIGN_OUT } from \"./types\";\n\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\n\nexport const moveSnake = snakeHead => {\n  return {\n    type: \"MOVE_SNAKE\",\n    payload: snakeHead\n  };\n};\n","export const SIGN_IN = \"SIGN_IN\";\nexport const SIGN_OUT = \"SIGN_OUT\";\n","import React from \"react\";\nimport GoogleAuth from \"./GoogleAuth\";\n\nconst Header = props => {\n  return (\n    <div className=\"ui menu\">\n      <div className=\"header item\">{props.title}</div>\n      <div className=\"item\">{props.score}</div>\n      <div className=\"item\">{props.prevHighScore}</div>\n      <div className=\"right menu\">\n        <GoogleAuth />\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"../css/styles.css\";\nimport SnakeBody from \"./SnakeBody\";\nimport Target from \"./Target\";\nimport getRandomCoordinates from \"../functions/getRandomCoordinates\";\nimport Header from \"./Header\";\n\n// new imports\nimport { moveSnake } from \"../actions/index\";\n\nconst initialState = {\n  direction: null,\n  speed: 200,\n  targetCoordinates: getRandomCoordinates(0, 98),\n  snakeBodyCoordinates: [[0, 0], [2, 0], [4, 0]],\n  show: { display: \"block\" },\n  hidden: { display: \"none\" },\n  pulse: 2\n};\nexport default class App extends Component {\n  state = { ...initialState, ...{ prevHighScore: 0 } };\n\n  componentDidMount() {\n    document.onkeydown = this.keyPress;\n    setInterval(this.moveSnake, this.state.speed);\n  }\n\n  componentDidUpdate() {\n    this.checkBorderCollision();\n    this.checkSelfCollision();\n    this.checkHitTarget();\n  }\n  keyPress = e => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({ direction: \"UP\" });\n        break;\n      case 40:\n        this.setState({ direction: \"DOWN\" });\n        break;\n      case 37:\n        this.setState({ direction: \"LEFT\" });\n        break;\n      case 39:\n        this.setState({ direction: \"RIGHT\" });\n        break;\n      default:\n        break;\n    }\n  };\n\n  // moveSnake = () => {\n  //   let snakePulse = this.state.pulse;\n  //   let snakeDots = [...this.state.snakeBodyCoordinates];\n  //   let snakeHead = snakeDots[snakeDots.length - 1];\n  //   switch (this.state.direction) {\n  //     case \"RIGHT\":\n  //       snakeHead = [snakeHead[0] + snakePulse, snakeHead[1]];\n  //       break;\n  //     case \"LEFT\":\n  //       snakeHead = [snakeHead[0] - snakePulse, snakeHead[1]];\n  //       break;\n  //     case \"UP\":\n  //       snakeHead = [snakeHead[0], snakeHead[1] - snakePulse];\n  //       break;\n  //     case \"DOWN\":\n  //       snakeHead = [snakeHead[0], snakeHead[1] + snakePulse];\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  //   snakeDots.push(snakeHead);\n  //   snakeDots.shift();\n  //   this.setState({\n  //     snakeBodyCoordinates: snakeDots\n  //   });\n  // };\n\n  checkBorderCollision() {\n    let snakeHead = this.state.snakeBodyCoordinates[\n      this.state.snakeBodyCoordinates.length - 1\n    ];\n    if (\n      snakeHead[0] >= 100 ||\n      snakeHead[1] >= 100 ||\n      snakeHead[0] < 0 ||\n      snakeHead[1] < 0\n    ) {\n      this.endGame();\n    }\n  }\n\n  checkSelfCollision() {\n    let snakeBody = [...this.state.snakeBodyCoordinates];\n    let snakeHead = snakeBody[snakeBody.length - 1];\n    snakeBody.pop();\n    snakeBody.forEach(dot => {\n      if (snakeHead[0] === dot[0] && snakeHead[1] == dot[1]) {\n        this.endGame();\n      }\n    });\n  }\n\n  checkHitTarget() {\n    let snakeHead = this.state.snakeBodyCoordinates[\n      this.state.snakeBodyCoordinates.length - 1\n    ];\n    let target = this.state.targetCoordinates;\n    if (snakeHead[0] === target[0] && snakeHead[1] === target[1]) {\n      let randomCoordinates = getRandomCoordinates(0, 98);\n      this.setState({ targetCoordinates: randomCoordinates });\n      this.snakeLengthIncrease();\n    }\n  }\n\n  snakeLengthIncrease() {\n    let updatedSnakeBody = [...this.state.snakeBodyCoordinates];\n    updatedSnakeBody.unshift([]);\n    this.setState({ snakeBodyCoordinates: updatedSnakeBody });\n  }\n\n  endGame() {\n    let highScore = this.state.prevHighScore;\n    let currentScore = this.state.snakeBodyCoordinates.length - 3;\n    if (currentScore > highScore) {\n      highScore = currentScore;\n    } else {\n      highScore = this.state.prevHighScore;\n    }\n    let newState = { ...initialState, ...{ prevHighScore: highScore } };\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <div className=\"centered ui\">\n        <Header\n          title={\"Snake Game Using React\"}\n          score={`Your Score is: ${this.state.snakeBodyCoordinates.length - 3}`}\n          prevHighScore={`Current High Score is: ${this.state.prevHighScore}`}\n        />\n        <div className=\"ui equal width grid\">\n          <div className=\"centered row\">\n            <div className=\"arena\" style={this.state.show}>\n              <SnakeBody\n                SnakeBodyCoordinates={this.state.snakeBodyCoordinates}\n              />\n              <Target coordinates={this.state.targetCoordinates} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n\nimport App from \"./components/App\";\nimport reducers from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}